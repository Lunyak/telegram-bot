// const profileCallbacks = require("./callbacks/profileCallbacks");
// const removeCharacterHandler = require("./callbacks/removeCharacterHandler");
// const handleCallback = require("../handlers/commandHendlers");


module.exports = {
  init: async (bot, userStates) => {

    console.log('‚âà‚âà‚âà‚âà√ß√ß√ß‚âà‚âà‚âà‚âà', bot.profile);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Ç–∏–ª–∏—Ç—É –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
   
    // bot.profile.initProfileActions(bot, userStates)
    // // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
    // bot.action("my_roles", (ctx) => profileCallbacks.myRoles(ctx, userStates));
    // bot.action("back_to_profile", (ctx) =>
    //   profileCallbacks.backToProfile(ctx, userStates)
    // );
    // bot.action("add_role", (ctx) => profileCallbacks.addRole(ctx, userStates));
    // bot.action("remove_role", (ctx) =>
    //   profileCallbacks.removeRole(ctx, userStates)
    // );
    // bot.action("close_profile", (ctx) =>
    //   profileCallbacks.closeProfile(ctx, userStates)
    // );

    // // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–ª–µ–π
    // bot.action(/^remove_character_(.+)$/, async (ctx) => {
    //   const userId = ctx.from.id;
    //   const state = userStates.get(userId);

    //   if (!state) {
    //     return ctx.answerCbQuery("–°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.");
    //   }

    //   await removeCharacterHandler(ctx, userStates);
    // });

    // bot.action("cancel_remove", async (ctx) => {
    //   console.log("Handling cancel_remove callback");
    //   await removeCharacterHandler(ctx, userStates);
    // });

    // // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    // bot.action("set_reminder", async (ctx) => {
    //   const userId = ctx.from.id;
    //   const state = userStates.get(userId);

    //   if (!state) {
    //     return ctx.answerCbQuery("–°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.");
    //   }

    //   // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    //   await ctx.reply("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! üïí");
    //   logBox(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —É—Å—Ç–∞–Ω–æ–≤–∏–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.`, {
    //     borderColor: "yellow",
    //   });

    //   // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    // });

    // // –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    // bot.on("callback_query", async (ctx) => {
    //   const data = ctx.callbackQuery.data;

    //   // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, –µ—Å–ª–∏ —ç—Ç–æ callback –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–ª–∏
    //   if (data.startsWith("remove_character_") || data === "cancel_remove") {
    //     logBox("Skipping general handler for: üöÄ", {
    //       borderColor: "yellow",
    //     });
    //     return;
    //   }

    //   await handleCallback(ctx, userStates);
    // });
  },
};
