const { Markup } = require("telegraf");
const { updateUserData } = require("../utils/userApi");

module.exports = async (ctx, userStates) => {
  const userId = ctx.from.id;
  const state = userStates.get(userId);

  console.log(`[removeCharacter] Starting for user ${userId}`);
  console.log(`[removeCharacter] Current state:`, state);

  if (!state || !state.user) {
    console.log(`[removeCharacter] No state or user found for ${userId}`);
    return ctx.reply(
      "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π /register."
    );
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏
  if (ctx.callbackQuery) {
    const data = ctx.callbackQuery.data;
    console.log(`[removeCharacter] Callback data: ${data}`);

    if (data === "cancel_remove") {
      console.log(`[removeCharacter] Canceling removal`);
      await ctx.answerCbQuery("–û—Ç–º–µ–Ω–µ–Ω–æ");
      await ctx.editMessageText("–£–¥–∞–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ ‚úÖ");
      userStates.delete(userId);
      return;
    }

    if (data.startsWith("remove_character_")) {
      const characterToRemove = data.replace("remove_character_", "");
      console.log(`[removeCharacter] Removing character: ${characterToRemove}`);

      const userRoles = state.user.characters || [];
      const updatedRoles = userRoles.filter(
        (role) => role !== characterToRemove
      );

      console.log(`[removeCharacter] Original roles:`, userRoles);
      console.log(`[removeCharacter] Updated roles:`, updatedRoles);

      try {
        console.log(`[removeCharacter] Calling API to update user ${userId}`);
        await ctx.answerCbQuery("–£–¥–∞–ª–µ–Ω–∏–µ...");

        await updateUserData(userId, {
          characters: updatedRoles,
        });

        console.log(`[removeCharacter] API call successful`);
        await ctx.editMessageText(
          `üóë –†–æ–ª—å "${characterToRemove}" —É–¥–∞–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!`
        );
      } catch (err) {
        console.error(`[removeCharacter] Error:`, err);
        await ctx.answerCbQuery("–û—à–∏–±–∫–∞");
        await ctx.editMessageText(
          "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        );
      }

      console.log(`[removeCharacter] Cleaning up state for ${userId}`);
      userStates.delete(userId);
      return;
    }
  }

  // –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫: –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–æ–ª–∏
  const userCharacters = state.user.characters || [];
  console.log(`[removeCharacter] User characters:`, userCharacters);

  if (userCharacters.length === 0) {
    console.log(`[removeCharacter] No characters found`);
    return ctx.reply("–£ —Ç–µ–±—è –Ω–µ—Ç —Ä–æ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å.");
  }

  userStates.set(userId, {
    step: "removeCharacter_select",
    user: state.user || {},
  });
  console.log(`[removeCharacter] State updated for ${userId}`);

  // –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–æ–ª—è–º–∏
  const inlineKeyboard = [
    ...userCharacters.map((character) => [
      Markup.button.callback(character, `remove_character_${character}`),
    ]),
    [Markup.button.callback("–û—Ç–º–µ–Ω–∞", "cancel_remove")],
  ];

  console.log(`[removeCharacter] Sending keyboard with options`);
  return ctx.reply(
    "–í—ã–±–µ—Ä–∏ —Ä–æ–ª—å, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å:",
    Markup.inlineKeyboard(inlineKeyboard)
  );
};
