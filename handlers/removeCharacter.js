const axios = require("axios");
const { Markup } = require("telegraf");

module.exports = async (ctx, userStates) => {
  const userId = ctx.from.id;
  const state = userStates.get(userId);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏
  if (ctx.callbackQuery) {
    const data = ctx.callbackQuery.data;

    if (data === "cancel_remove") {
      await ctx.editMessageText("–£–¥–∞–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ ‚úÖ");
      userStates.delete(userId);
      return;
    }

    if (data.startsWith("remove_character_")) {
      const characterToRemove = data.replace("remove_character_", "");
      const userRoles = state?.user.characters || [];
      const updatedRoles = userRoles.filter(
        (role) => role !== characterToRemove
      );

      try {
        await updateUserData(state.user.id, {
          characters: updatedRoles,
        });

        await ctx.editMessageText(
          `üóë –†–æ–ª—å "${characterToRemove}" —É–¥–∞–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!`
        );
      } catch (err) {
        console.error(err.response?.data || err.message);
        await ctx.editMessageText("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏.");
      }

      userStates.delete(userId);
      return;
    }
  }

  // –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫: –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–æ–ª–∏
  const characters = state?.user.characters || [];

  if (characters.length === 0) {
    return ctx.reply("–£ —Ç–µ–±—è –Ω–µ—Ç —Ä–æ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å.");
  }

  userStates.set(userId, {
    step: "removeCharacter_select",
    user: state?.user || {},
  });

  // –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–æ–ª—è–º–∏
  const inlineKeyboard = [
    ...characters.map((character) => [
      Markup.button.callback(character, `remove_character_${character}`),
    ]),
    [Markup.button.callback("–û—Ç–º–µ–Ω–∞", "cancel_remove")],
  ];

  return ctx.reply(
    "–í—ã–±–µ—Ä–∏ —Ä–æ–ª—å, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å:",
    Markup.inlineKeyboard(inlineKeyboard)
  );
};
