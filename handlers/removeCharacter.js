const axios = require("axios");
const { Markup } = require("telegraf");

module.exports = async (ctx, userStates) => {
  const userId = ctx.from.id;
  const state = userStates.get(userId);
  const text = ctx.message.text;

  // ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
  if (text.toLowerCase() === "–æ—Ç–º–µ–Ω–∞") {
    userStates.delete(userId);
    return ctx.reply("–£–¥–∞–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ ‚úÖ", Markup.removeKeyboard());
  }

  switch (state?.step) {
    case "removeCharacter_select":
      const userRoles = state.user.characters || [];

      if (!userRoles.includes(text)) {
        return ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Ä–æ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –Ω–∞–∂–º–∏ –û—Ç–º–µ–Ω–∞.");
      }

      const updatedRoles = userRoles.filter((role) => role !== text);

      try {
        await axios.patch(
          `http://localhost:3000/users/telegram/${state.user.id}`,
          {
            characters: updatedRoles,
          }
        );

        ctx.reply(`üóë –†–æ–ª—å "${text}" —É–¥–∞–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!`);
      } catch (err) {
        console.error(err.response?.data || err.message);
        ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏.");
      }

      userStates.delete(userId);
      break;

    default:
      // –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫: –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–æ–ª–∏
      const characters = state?.user.characters || [];

      if (characters.length === 0) {
        return ctx.reply("–£ —Ç–µ–±—è –Ω–µ—Ç —Ä–æ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å.");
      }

      userStates.set(userId, {
        step: "removeCharacter_select",
        user: state?.user || {},
      });

      return ctx.reply(
        "–í—ã–±–µ—Ä–∏ —Ä–æ–ª—å, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å:",
        Markup.keyboard([...characters.map((r) => [r]), ["–û—Ç–º–µ–Ω–∞"]])
          .oneTime()
          .resize()
      );
  }
};
