const { Markup } = require("telegraf");
const { getUserData } = require("../utils/userApi");
const { formatProfileMessage } = require("../utils/formatters");

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
 */
const profileCallbacks = {
  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–æ–ª–µ–π
   */
  async myRoles(ctx, userStates) {
    const userId = ctx.from.id;

    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await getUserData(userId);

      if (!user) {
        return ctx.answerCbQuery("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
      }

      const characters = user.characters || [];

      if (characters.length === 0) {
        await ctx.answerCbQuery("–£ –≤–∞—Å –Ω–µ—Ç —Ä–æ–ª–µ–π.");
        return ctx.editMessageText(
          "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–æ–ª–µ–π. –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /addrole.",
          Markup.inlineKeyboard([
            [Markup.button.callback("¬´ –ù–∞–∑–∞–¥", "back_to_profile")],
          ])
        );
      }

      const rolesMessage = `<b>–í–∞—à–∏ —Ä–æ–ª–∏:</b>\n\n${characters
        .map((role, index) => `${index + 1}. ${role}`)
        .join("\n")}`;

      await ctx.editMessageText(rolesMessage, {
        parse_mode: "HTML",
        ...Markup.inlineKeyboard([
          [Markup.button.callback("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª—å", "add_role")],
          [Markup.button.callback("üóë –£–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å", "remove_role")],
          [Markup.button.callback("¬´ –ù–∞–∑–∞–¥", "back_to_profile")],
        ]),
      });

      await ctx.answerCbQuery();
    } catch (error) {
      console.error("Error handling my_roles action:", error);
      await ctx.answerCbQuery("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–æ–ª–µ–π.");
    }
  },

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—é
   */
  async backToProfile(ctx, userStates) {
    const userId = ctx.from.id;

    try {
      const user = await getUserData(userId);

      if (!user) {
        return ctx.answerCbQuery("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
      }

      const profileMessage = formatProfileMessage(user);

      await ctx.editMessageText(profileMessage, {
        parse_mode: "HTML",
        ...Markup.inlineKeyboard([
          [Markup.button.callback("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", "edit_profile")],
          [Markup.button.callback("üé≠ –ú–æ–∏ —Ä–æ–ª–∏", "my_roles")],
        ]),
      });

      await ctx.answerCbQuery();
    } catch (error) {
      console.error("Error handling back_to_profile action:", error);
      await ctx.answerCbQuery("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.");
    }
  },

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª–∏
   */
  async addRole(ctx, userStates) {
    await ctx.answerCbQuery("–ü–µ—Ä–µ—Ö–æ–¥ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é —Ä–æ–ª–∏...");
    await ctx.deleteMessage();

    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª–∏
    const hendlerCharacters = require("../handlers/charactersHendler");
    await hendlerCharacters(ctx, userStates);
  },

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–ª–∏
   */
  async removeRole(ctx, userStates) {
    await ctx.answerCbQuery("–ü–µ—Ä–µ—Ö–æ–¥ –∫ —É–¥–∞–ª–µ–Ω–∏—é —Ä–æ–ª–∏...");
    await ctx.deleteMessage();

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userId = ctx.from.id;
    const user = await getUserData(userId);

    userStates.set(userId, {
      step: "removeCharacter_select",
      user,
    });

    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–ª–∏
    const removeCharacterHandler = require("../handlers/removeCharacter");
    await removeCharacterHandler(ctx, userStates);
  },
};

module.exports = profileCallbacks;
