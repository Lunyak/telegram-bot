// üìÅ steps/editSteps.js
const axios = require("axios");
const { Markup } = require("telegraf");

module.exports = async function handleEditStep(ctx, state, text, userStates) {
  const userId = ctx.from.id;

  switch (state.step) {
    case "edit_select":
      if (
        !["–ò–º—è", "–§–∞–º–∏–ª–∏—è", "Email", "–¢–µ–ª–µ—Ñ–æ–Ω", "–ü–æ–ª", "–†–æ–ª—å"].includes(text)
      ) {
        return ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø–æ–ª–µ —Å –∫–Ω–æ–ø–æ–∫");
      }
      state.editField = text;
      state.step = "edit_value";
      return ctx.reply(
        `–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è: ${text}`,
        Markup.removeKeyboard()
      );

    case "edit_value":
      const fieldMap = {
        –ò–º—è: "name",
        –§–∞–º–∏–ª–∏—è: "surname",
        Email: "email",
        –¢–µ–ª–µ—Ñ–æ–Ω: "phone",
        –ü–æ–ª: "sex",
        –†–æ–ª—å: "role",
      };
      const field = fieldMap[state.editField];
      try {
        await axios.patch(`http://localhost:3000/users/${state.user.id}`, {
          [field]: text,
        });
        ctx.reply(`‚úÖ ${state.editField} –æ–±–Ω–æ–≤–ª–µ–Ω–æ!`);
      } catch (err) {
        console.error(err.response?.data || err.message);
        ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏");
      }
      userStates.delete(userId);
      break;
  }
};