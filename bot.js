require("dotenv").config();
const { Telegraf } = require("telegraf");

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(process.env.BOT_TOKEN);

// –ò–º–ø–æ—Ä—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
const ProfileService = require("./services/profile/ProfileService");

/**
 * –ö–ª–∞—Å—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
 * –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –±–æ—Ç–∞
 */
class BotManager {
  constructor(bot) {
    this.bot = bot;
    this.userStates = new Map();
    this.profile = new ProfileService(this.bot, this.userStates);
    // this.birthdayService = new BirthdayService(bot);
    this.callbackHandlers = require("./handlers/callbackHandlers");
    this.commandHandlers = require("./handlers/commandHendlers");
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
   */
  init() {
    this._setupStartCommand();
    this._setupCommands();
    // this._setupRoleManagement();
    this._setupMessageHandlers();
    this._registerBotCommands();
    this._initServices();
    this._startBot();
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
   */
  _setupStartCommand() {
    this.bot.start((ctx) => {
      ctx.reply(
        `–ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ –∏ —Ä–µ–ø–µ—Ç–∏—Ü–∏—è–º–∏ üé≠`
      );
    });
  }

  _setupCommands() {
    this.bot.command(["profile", "me"], (ctx) => {
      this.profile.initMainProfileHendler(ctx, this.userStates);
    });
    this.bot.command("register", (ctx) =>
      this.profile.registerUser(ctx, this.userStates)
    );
  }
  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –ø—Ä–æ—Ñ–∏–ª—è –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
   */
  // _setupProfileCommands() {

  //   this.bot.command("checkbirthdays", async (ctx) => {
  //     if (ctx.from.id === parseInt(process.env.ADMIN_ID)) {
  //       await ctx.reply("–ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è...");
  //       await this.birthdayService.manualCheck();
  //       await ctx.reply("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
  //     }
  //   });
  // }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  _setupMessageHandlers() {
    
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –≤ –º–µ–Ω—é –±–æ—Ç–∞
   */
  _registerBotCommands() {
    this.commandHandlers.init(this.bot);
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª—É–∂–± –±–æ—Ç–∞
   */
  _initServices() {
    // this.birthdayService.init();
    this.profile.init();
  }

  /**
   * –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
   */
  _startBot() {
    this.bot
      .launch()
      .then(() => {
        console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚úÖ");
      })
      .catch((err) => {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:", err);
      });

    // –í–∫–ª—é—á–∞–µ–º graceful stop
    process.once("SIGINT", () => this.bot.stop("SIGINT"));
    process.once("SIGTERM", () => this.bot.stop("SIGTERM"));
  }
}

// –°–æ–∑–¥–∞–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç–∞
const botManager = new BotManager(bot);
botManager.init();
