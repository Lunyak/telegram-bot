require("dotenv").config();
const { Telegraf } = require("telegraf");
const { getUserData } = require("./utils/userApi");

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(process.env.BOT_TOKEN);

// –ò–º–ø–æ—Ä—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
const registerHandler = require("./handlers/registerUserHandler");
const editHandler = require("./handlers/editHandler");
const messageHandler = require("./handlers/messageHandler");
const hendlerCharacters = require("./handlers/charactersHendler");
const handleCallback = require("./callbacks/handleCallback");
const removeCharacterHandler = require("./handlers/removeCharacter");
const profileHandler = require("./handlers/profileHandler");
const profileCallbacks = require("./callbacks/profileCallbacks");
const BirthdayService = require("./services/birthdayService");

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates = new Map();

/**
 * –ö–ª–∞—Å—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
 * –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –±–æ—Ç–∞
 */
class BotManager {
  constructor(bot) {
    this.bot = bot;
    this.userStates = new Map();
    this.birthdayService = new BirthdayService(bot);
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
   */
  init() {
    this._setupBasicCommands();
    this._setupProfileCommands();
    this._setupRoleManagement();
    this._setupCallbackHandlers();
    this._setupMessageHandlers();
    this._registerBotCommands();
    this._initServices();
    this._startBot();
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
   */
  _setupBasicCommands() {
    this.bot.start((ctx) => {
      ctx.reply(
        `–ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ –∏ —Ä–µ–ø–µ—Ç–∏—Ü–∏—è–º–∏ üé≠`
      );
    });
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –ø—Ä–æ—Ñ–∏–ª—è –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
   */
  _setupProfileCommands() {
    this.bot.command(["profile", "me"], (ctx) =>
      profileHandler(ctx, this.userStates)
    );
    this.bot.command("register", (ctx) =>
      registerHandler(ctx, this.userStates)
    );
    this.bot.command("edit", (ctx) => editHandler(ctx, this.userStates));

    this.bot.command("checkbirthdays", async (ctx) => {
      if (ctx.from.id === parseInt(process.env.ADMIN_ID)) {
        await ctx.reply("–ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è...");
        await this.birthdayService.manualCheck();
        await ctx.reply("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
      }
    });
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏
   */
  _setupRoleManagement() {
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π
    this.bot.command(["addrole", "addRole"], (ctx) =>
      hendlerCharacters(ctx, this.userStates)
    );

    // –£–¥–∞–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π
    this.bot.command(["removerole", "removeRole"], async (ctx) => {
      console.log("Received remove role command from:", ctx.from.id);

      try {
        const user = await getUserData(ctx.from.id).catch((err) => {
          console.error("Error fetching user data:", err);
          throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
        });

        if (!user) {
          return ctx.reply(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è. –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /register."
          );
        }

        this.userStates.set(ctx.from.id, {
          step: "removeCharacter_select",
          user,
        });

        await removeCharacterHandler(ctx, this.userStates);
      } catch (error) {
        console.error("Error handling remove role command:", error);
        await ctx.reply(
          `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${
            error.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
          }. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`
        );
      }
    });
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
   */
  _setupCallbackHandlers() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
    this.bot.action("my_roles", (ctx) =>
      profileCallbacks.myRoles(ctx, this.userStates)
    );
    this.bot.action("back_to_profile", (ctx) =>
      profileCallbacks.backToProfile(ctx, this.userStates)
    );
    this.bot.action("add_role", (ctx) =>
      profileCallbacks.addRole(ctx, this.userStates)
    );
    this.bot.action("remove_role", (ctx) =>
      profileCallbacks.removeRole(ctx, this.userStates)
    );
    this.bot.action("close_profile", (ctx) =>
      profileCallbacks.closeProfile(ctx, this.userStates)
    );

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–ª–µ–π
    this.bot.action(/^remove_character_(.+)$/, async (ctx) => {
      console.log("Handling remove_character callback");
      const userId = ctx.from.id;
      const state = this.userStates.get(userId);

      if (!state) {
        return ctx.answerCbQuery("–°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.");
      }

      await removeCharacterHandler(ctx, this.userStates);
    });

    this.bot.action("cancel_remove", async (ctx) => {
      console.log("Handling cancel_remove callback");
      await removeCharacterHandler(ctx, this.userStates);
    });

    // –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    this.bot.on("callback_query", async (ctx) => {
      const data = ctx.callbackQuery.data;

      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, –µ—Å–ª–∏ —ç—Ç–æ callback –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–ª–∏
      if (data.startsWith("remove_character_") || data === "cancel_remove") {
        console.log("Skipping general handler for:", data);
        return;
      }

      await handleCallback(ctx, this.userStates);
    });
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  _setupMessageHandlers() {
    this.bot.on("text", (ctx) => messageHandler(ctx, this.userStates));
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –≤ –º–µ–Ω—é –±–æ—Ç–∞
   */
  _registerBotCommands() {
    try {
      this.bot.telegram
        .setMyCommands([
          { command: "start", description: "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞" },
          { command: "register", description: "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è" },
          { command: "edit", description: "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å" },
          { command: "addrole", description: "–î–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª—å" },
          { command: "removerole", description: "–£–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å" },
          { command: "profile", description: "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å" },
        ])
        .then(() => {
          console.log("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã");
        });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–æ–º–∞–Ω–¥:", error);
    }
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª—É–∂–± –±–æ—Ç–∞
   */
  _initServices() {
    this.birthdayService.init();
  }

  /**
   * –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
   */
  _startBot() {
    this.bot
      .launch()
      .then(() => {
        console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚úÖ");
      })
      .catch((err) => {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:", err);
      });

    // –í–∫–ª—é—á–∞–µ–º graceful stop
    process.once("SIGINT", () => this.bot.stop("SIGINT"));
    process.once("SIGTERM", () => this.bot.stop("SIGTERM"));
  }
}

// –°–æ–∑–¥–∞–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç–∞
const botManager = new BotManager(bot);
botManager.init();
